#usda 1.0

def "ModelShading" (
    prepend references = @./char_shading_compact.usda@</ShadingDefs>
    variants = {
        string materialVariant = "Wet"
    }
    prepend variantSets = "materialVariant"
)
{
    variantSet "materialVariant" = {
        "Dry" {
            over "Materials"
            {
                over "HairMaterial" (
                    variants = {
                        string materialVariant = "Dry"
                    }
                )
                {
                }

                over "SkinMaterial" (
                    variants = {
                        string materialVariant = "Dry"
                    }
                )
                {
                }

                over "NailsMaterial" (
                    variants = {
                        string materialVariant = "Dry"
                    }
                )
                {
                }
            }

        }
        "Wet" {
            over "Materials"
            {
                over "HairMaterial" (
                    variants = {
                        string materialVariant = "Wet"
                    }
                )
                {
                }

                over "SkinMaterial" (
                    variants = {
                        string materialVariant = "Wet"
                    }
                )
                {
                }

                over "NailsMaterial" (
                    variants = {
                        string materialVariant = "Wet"
                    }
                )
                {
                }
            }

        }
    }
}

def "ShadingDefs"
{
    def Scope "Shaders"
    {
        def Shader "HairWetSurface"
        {
            uniform color3f outputs:out
        }

        def Shader "HairWetDisp"
        {
            uniform vector3f outputs:out
        }

        def Shader "HairWetPattern"
        {
            uniform float[] outputs:out
        }

        def Shader "HairDrySurface"
        {
            uniform color3f outputs:out
        }

        def Shader "HairDryDisp"
        {
            uniform vector3f outputs:out
        }

        def Shader "HairDryPattern"
        {
            uniform float[] outputs:out
        }

        def Shader "SkinWetSurface"
        {
            uniform color3f outputs:out
        }

        def Shader "SkinWetDisp"
        {
            uniform vector3f outputs:out
        }

        def Shader "SkinWetPattern"
        {
            uniform float[] outputs:out
        }

        def Shader "SkinDrySurface"
        {
            uniform color3f outputs:out
        }

        def Shader "SkinDryDisp"
        {
            uniform vector3f outputs:out
        }

        def Shader "SkinDryPattern"
        {
            uniform float[] outputs:out
        }

        def Shader "NailsWetSurface"
        {
            uniform color3f outputs:out
        }

        def Shader "NailsWetDisp"
        {
            uniform vector3f outputs:out
        }

        def Shader "NailsWetPattern"
        {
            uniform float[] outputs:out
        }

        def Shader "NailsDrySurface"
        {
            uniform color3f outputs:out
        }

        def Shader "NailsDryDisp"
        {
            uniform vector3f outputs:out
        }

        def Shader "NailsDryPattern"
        {
            uniform float[] outputs:out
        }
    }

    def Scope "Materials"
    {
        def Material "HairMaterial" (
            variants = {
                string materialVariant = "Dry"
            }
            prepend variantSets = "materialVariant"
        )
        {
            variantSet "materialVariant" = {
                "Dry" {
                    uniform vector3f outputs:disp.connect = </ShadingDefs/Shaders/HairDryDisp.outputs:out>
                    uniform float[] outputs:pattern.connect = </ShadingDefs/Shaders/HairDryPattern.outputs:out>
                    uniform color3f outputs:surf.connect = </ShadingDefs/Shaders/HairDrySurface.outputs:out>

                }
                "Wet" {
                    uniform vector3f outputs:disp.connect = </ShadingDefs/Shaders/HairWetDisp.outputs:out>
                    uniform float[] outputs:pattern.connect = </ShadingDefs/Shaders/HairWetPattern.outputs:out>
                    uniform color3f outputs:surf.connect = </ShadingDefs/Shaders/HairWetSurface.outputs:out>

                }
            }
        }

        def Material "SkinMaterial" (
            variants = {
                string materialVariant = "Dry"
            }
            prepend variantSets = "materialVariant"
        )
        {
            variantSet "materialVariant" = {
                "Dry" {
                    uniform vector3f outputs:disp.connect = </ShadingDefs/Shaders/SkinDryDisp.outputs:out>
                    uniform float[] outputs:pattern.connect = </ShadingDefs/Shaders/SkinDryPattern.outputs:out>
                    uniform color3f outputs:surf.connect = </ShadingDefs/Shaders/SkinDrySurface.outputs:out>

                }
                "Wet" {
                    uniform vector3f outputs:disp.connect = </ShadingDefs/Shaders/SkinWetDisp.outputs:out>
                    uniform float[] outputs:pattern.connect = </ShadingDefs/Shaders/SkinWetPattern.outputs:out>
                    uniform color3f outputs:surf.connect = </ShadingDefs/Shaders/SkinWetSurface.outputs:out>

                }
            }
        }

        def Material "NailsMaterial" (
            variants = {
                string materialVariant = "Dry"
            }
            prepend variantSets = "materialVariant"
        )
        {
            variantSet "materialVariant" = {
                "Dry" {
                    uniform vector3f outputs:disp.connect = </ShadingDefs/Shaders/NailsDryDisp.outputs:out>
                    uniform float[] outputs:pattern.connect = </ShadingDefs/Shaders/NailsDryPattern.outputs:out>
                    uniform color3f outputs:surf.connect = </ShadingDefs/Shaders/NailsDrySurface.outputs:out>

                }
                "Wet" {
                    uniform vector3f outputs:disp.connect = </ShadingDefs/Shaders/NailsWetDisp.outputs:out>
                    uniform float[] outputs:pattern.connect = </ShadingDefs/Shaders/NailsWetPattern.outputs:out>
                    uniform color3f outputs:surf.connect = </ShadingDefs/Shaders/NailsWetSurface.outputs:out>

                }
            }
        }
    }
}

