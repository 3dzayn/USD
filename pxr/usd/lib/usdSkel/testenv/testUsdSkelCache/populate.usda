#usda 1.0

def Skeleton "Skel1" {
}

def Skeleton "Skel2" {
}

def Skeleton "Skel3" {
}

def PackedJointAnimation "Anim1" {
}

def PackedJointAnimation "Anim2" {
}

def PackedJointAnimation "InactiveAnim" (active=false) {
}

def SkelRoot "InheritedBindings" {
    def Scope "Model1" {
        rel skel:skeleton = </Skel1>
        
        def Scope "A" {
            # This animation source applies below, not above!
            rel skel:animationSource = </Anim1>

            def Scope "B" {
                # This adopts the animation above
                rel skel:skeleton = </Skel2>
                
                def Scope "Gprim" {
                }
            }
        }
        def Scope "C" {
            # This takes the locally-bound animation
            rel skel:animationSource = </Anim2>
            rel skel:skeleton = </Skel3>

            def Scope "Gprim" {
            }
        }

        def Scope "NonRigidScope1" {
            # Non-xformable scope: cannot treat as rigid.
            matrix4d primvars:skel:geomBindTransform = ((1,0,0,0),(0,1,0,0),(0,0,1,0),(0,0,0,1))
            
            int[] primvars:skel:jointIndices = [] (interpolation = "constant")
            float[] primvars:skel:jointWeights = [] (interpolation = "constant")

            def Mesh "A" {
                uniform token[] skel:joints = ["A", "B", "C"]
            }

            def Mesh "B" {
                int[] primvars:skel:jointIndices = [] (interpolation = "vertex")
                float[] primvars:skel:jointWeights = [] (interpolation = "vertex")
            }
        }

        def Xform "NonRigidScope2" {
            # child prims have bindings; should not be identified as rigid.
            matrix4d primvars:skel:geomBindTransform = ((1,0,0,0),(0,1,0,0),(0,0,1,0),(0,0,0,1))
            int[] primvars:skel:jointIndices = [] (interpolation = "constant")
            float[] primvars:skel:jointWeights = [] (interpolation = "constant")

            def Mesh "A" {
                uniform token[] skel:joints = ["A", "B", "C"]
            }

            def Cube "B" {
            }
        }
        
        def Xform "RigidScopeParent" {
            # 
            matrix4d primvars:skel:geomBindTransform = ((1,0,0,0),(0,1,0,0),(0,0,1,0),(0,0,0,1))

            def Xform "RigidScope" {
                # Xformable scope; can be treated as rigid.
                # geomBindTransform should be inherited from the parent.

                int[] primvars:skel:jointIndices = [] (interpolation = "constant")
                float[] primvars:skel:jointWeights = [] (interpolation = "constant")
                uniform bool skel:rigidlyDeformed = true

                def Mesh "A" {}
                
                def Cube "B" {}
            }
        }
    }

    def Scope "Model2" {
    }

    def Scope "Model3" {
        rel skel:animationSource = </Anim1>
            
        def Scope "SkelWithInactiveAnim" {
            rel skel:skeleton = </Skel1>
            rel skel:animationSource = </InactiveAnim>
        }
    }
}