-- glslfx version 0.1

//
// Copyright 2018 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//

-- configuration
{
    "techniques": {
        "default": {
            "fragmentShader": {
                "source": [ "OitResolve.Image" ]
            }
        }
    }
}

-- glsl OitResolve.Image

#ifdef OIT_ENABLE_APPROXIMATION

#define OSR OIT_STEP_FUNCTION_RESOLUTION

struct StepNodes {
    int count;
    float depth[OSR];
    float trans[OSR];
};

void insertNode(float depth, float trans, inout StepNodes nodes) {
    // No compression for now.
    // Should we linearize depth? It might be better to put bigger importance
    // on front fragments, when compressing.
    int insertIndex = 0;
    while (insertIndex < min(OSR, nodes.count) &&
           depth > nodes.depth[insertIndex]) {
        insertIndex += 1;
    }
    if (insertIndex == OSR) {
        return;
    }

    for (int id = min(nodes.count, OSR) - 1; id > insertIndex; id -= 1) {
        nodes.depth[id] = nodes.depth[id - 1];
        nodes.trans[id] = nodes.trans[id - 1] * trans;
    }

    nodes.depth[insertIndex] = depth;
    nodes.depth[insertIndex] = trans;
    nodes.count += 1;
}

#endif

vec4 imageShader(vec2 uv)
{
#if defined(HD_HAS_hdxOitDataBuffer)
    int screenWidth = HdGet_oitWidth();
    int screenHeight = HdGet_oitHeight();
    int numSamples = HdGet_oitSamples();
    int bufferSize = screenWidth * screenHeight * numSamples;

    int screenIndex = int(gl_FragCoord.x) + int(gl_FragCoord.y) * screenWidth;
    int nodeIndex = hdxOitCounterBuffer[screenIndex+1];
#ifdef OIT_ENABLE_APPROXIMATION
    if (nodeIndex == -1) {
        return vec4(0.0, 0.0, 0.0, 0.0);
    }

    StepNodes nodes;
    for (int id = 0; id < OSR; id += 1) {
        nodes.depth[id] = 1.0e30;
        nodes.trans[id] = 1.0;
    }
    nodes.count = 0;

    for (int id = nodeIndex; id != -1; id = hdxOitIndexBuffer[id]) {
        float currentDepth = hdxOitDepthBuffer[id];
        float currentTrans = 1.0 - hdxOitDataBuffer[id].w;
        insertNode(currentDepth, currentTrans, nodes);
    }

    vec3 color = vec3(0.0, 0.0, 0.0);
    for (int id = nodeIndex; id != -1; id = hdxOitIndexBuffer[id]) {
        float currentDepth = hdxOitDepthBuffer[id];
        vec4 currentSample = hdxOitDataBuffer[id];
        float currentTrans = 1.0 - currentSample.w;

        int closestIndex = 0;
        while (closestIndex < min(OSR, nodes.count) &&
               currentDepth > nodes.depth[closestIndex]) {
            closestIndex += 1;
        }
        if (closestIndex != OSR) {
            color += currentSample.xyz * currentTrans * nodes.trans[closestIndex];
        }
    }

    return vec4(color, 1.0);
#else  // OIT_ENABLE_APPROXIMATION
    int numDepths = 0;

    // XXX renderPass.WriteOitLayersToBuffer does not clamp the number of
    //     depth samples we store for a pixel. Here we process no more than
    //     'OIT_LAYER_COUNT' for a pixel. (If there are greater than
    //     'OIT_LAYER_COUNT' samples stored for this pixel some will
    //     currently not contribute)
    vec4 sortedColor[OIT_LAYER_COUNT];
    float sortedDepth[OIT_LAYER_COUNT];

    while (nodeIndex != -1 && numDepths < OIT_LAYER_COUNT &&
           nodeIndex < bufferSize){
        float currentDepth = hdxOitDepthBuffer[nodeIndex]; 
        int insertIndex = numDepths; 
        while (insertIndex > 0 && sortedDepth[insertIndex - 1] > currentDepth) {
            sortedDepth[insertIndex] = sortedDepth[insertIndex - 1];
            sortedColor[insertIndex] = sortedColor[insertIndex - 1]; 
            insertIndex -= 1; 
        }
        sortedColor[insertIndex] = hdxOitDataBuffer[nodeIndex];
        sortedDepth[insertIndex] = hdxOitDepthBuffer[nodeIndex];
        numDepths += 1; 
        nodeIndex = hdxOitIndexBuffer[nodeIndex]; 
    }
    int depth = 0;
    vec4 colorAccum = vec4(0,0,0,0);
    while (depth < numDepths) {
        float ca = sortedColor[depth].a * (1 - colorAccum.a);
        vec3 cb = sortedColor[depth].rgb;
        colorAccum.rgb = colorAccum.rgb + cb * ca;
        colorAccum.a = colorAccum.a + ca;

        colorAccum = clamp(colorAccum, vec4(0), vec4(1));
        if (colorAccum.a >= 0.99) break;

        depth += 1; 
    }

    return colorAccum;
#endif  // OIT_ENABLE_APPROXIMATION

#else  // HD_HAS_hdxOitDataBuffer
    return vec4(0);
#endif   // HD_HAS_hdxOitDataBuffer
}
