-- glslfx version 0.1

//
// Copyright 2019 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//

-- configuration
{
    "techniques": {
        "default": {
            "fragmentShader": {
                "source": [ "AmbientOcclusion.SSAO" ]
            }
        }
    }
}

-- glsl AmbientOcclusion.SSAO

layout(location = 41) uniform sampler2D depthTexture;
// layout(location = 42) uniform sampler2D colorTexture;
// layout(location = 43) uniform sampler2D normalTexture;

float getAmbientOcclusionFactor(float currentDepth, vec2 uv) {
    float ao = 0.0;
    ivec2 depthSize =  textureSize(depthTexture, 0).xy;
    vec2 radius = 16.0 * vec2(1.0 / float(depthSize.x), 1.0 / float(depthSize.y));
    for (int i = 0; i < AO_SAMPLES; i += 1) {
        vec2 offset = radius * vec2(hdxAoKernel[i * 2], hdxAoKernel[i * 2 + 1]);
        float depth = texture2D(depthTexture, uv + offset).x;
        if (currentDepth > depth) {
            ao += 1.0;
        }
    }
    return ao / float(AO_SAMPLES);
}

vec4 imageShader(vec2 uv)
{
    float depth = texture2D(depthTexture, uv).x;
    return vec4(depth, 0, 0, 1);
    if (depth > 0.9999) {
        return vec4(0, 0, 0, 0);
    } else {
        return vec4(0.0, 0.0, 0.0, getAmbientOcclusionFactor(depth, uv));
    }
}
